<?php

namespace EvolutionCMS\Snippets\Sync\Services;

class CatalogNewService extends AbstractService
{
    /**
     * @var int
     */
    protected int $tv_id = 77;

    /**
     * @var int
     */
    protected int $catalog_id = 279719;

    /**
     * @var string
     */
    protected string $catalog_file = "catalog-new.json";

    public function __construct()
    {
        parent::__construct();

        unset($_SESSION[__CLASS__.".brands"]);
        unset($_SESSION[__CLASS__.".models"]);
    }

    /**
     * @param  array  $item
     * @return array
     */
    protected function params(array $item): array
    {
        $brand = $item['brand_name'];
        $model = $item['model_name'];

        $brand_lower = mb_strtolower($brand);
        $model_lower = mb_strtolower($model);

        if (!empty($_SESSION[__CLASS__.".models"]["{$brand_lower}-{$model_lower}"])) {
            return [];
        }

        if (empty($_SESSION[__CLASS__.".brands"][$brand_lower])) {
            $brand_id = $this->create([
                'pagetitle' => $brand,
                'menutitle' => $brand,
                'template' => 17,
                'parent' => $this->catalog_id,
                'mark_image' => "https://raw.githubusercontent.com/filippofilip95/car-logos-dataset/master/logos/thumb/{$brand_lower}.png",
            ], false);
            $_SESSION[__CLASS__.".brands"][$brand_lower] = $brand_id;
        } else {
            $brand_id = $_SESSION[__CLASS__.".brands"][$brand_lower];
        }

        $price = $item['price_with_discount'];
        $price_old = $item['base_price'];

        if (empty($price)) {
            $price = $item['base_price'];
            $price_old = 0;
        }

        $_SESSION[__CLASS__.".models"]["{$brand_lower}-{$model_lower}"] = $model_lower;

        return [
            'pagetitle' => $model,
            'menutitle' => $model,
            'template' => 20,
            'parent' => $brand_id,
            'mark_id' => $brand,
            'model_id' => $model,
            'model_full_title' => "{$brand} {$model}",
            'car_id_old' => $item['car_id'],
            'car-price' => $price,
            'old-car-price' => $price_old,
            'car_photos' => json_encode($this->formatPhotos($item['photos_path']), JSON_UNESCAPED_UNICODE),
            'car_modifications' => json_encode($this->formatModifications((array) $item['modifications']), JSON_UNESCAPED_UNICODE),
            'colors_list' => json_encode($this->formatColors((array) $item['colors']), JSON_UNESCAPED_UNICODE),
        ];
    }

    /**
     * @return array
     */
    protected function getProductIds(): array
    {
        if (empty($this->tv_id)) {
            return [];
        }

        $brands = $this->evo->runSnippet("DocLister", [
            'api' => 1,
            'parents' => $this->catalog_id,
            'showParent' => -1,
            'addWhereList' => "c.template = 17",
        ]);
        $brands = json_decode($brands, true);

        $_SESSION[__CLASS__.".brands"] = array_reduce($brands, function ($result, $item) {
            $result[mb_strtolower($item['pagetitle'])] = (int) $item['id'];
            return $result;
        }, []);

        $products = $this->evo->runSnippet("DocLister", [
            'api' => 1,
            'parents' => $this->catalog_id,
            'depth' => 5,
            'tvList' => "car_id_old",
            'showParent' => -1,
            'addWhereList' => "c.template = 20",
        ]);
        $products = json_decode($products, true);

        return array_column($products, "id", "tv_car_id_old");
    }

    /**
     * @param  array  $params
     * @param  bool  $events
     * @param  bool  $cache
     * @return int
     */
    protected function create(array $params, bool $events = true, bool $cache = false): int
    {
        return parent::create($params, false, false); // TODO: Change the autogenerated stub
    }

    /**
     * @param  int  $id
     * @param  array  $params
     * @param  bool  $events
     * @param  bool  $cache
     * @return void
     */
    protected function update(int $id, array $params, bool $events = true, bool $cache = false): void
    {
        parent::update($id, $params, false, false); // TODO: Change the autogenerated stub
    }

    /**
     * @param  string  $path
     * @return array
     */
    private function formatPhotos(string $path): array
    {
        if (empty($path)) {
            return [];
        }

        $photos = [
            'fieldValue' => [],
            'autoincrement' => 1
        ];

        $image_dir = "assets/import/images/Catalog/{$path}";
        $image_path = $this->evo->config['base_path'].$image_dir;

        if (!is_dir($image_path)) {
            return [];
        }

        $source_photos_arr = scandir($image_path);

        if (empty($source_photos_arr)) {
            return [];
        }

        foreach ($source_photos_arr as $key => $value) {
            if ($value == '.' || $value == '..') {
                unset($source_photos_arr[$key]);
                continue;
            }

            if (!file_exists("{$image_path}/{$value}")) {
                continue;
            }

            $photos['fieldValue'][] = [
                'image' => "{$image_dir}{$value}",
            ];
        }

        return $photos;
    }

    /**
     * @param  array  $colors
     * @return array
     */
    protected function formatColors(array $colors): array
    {
        $items = [];

        if (empty($colors)) {
            return [];
        }

        foreach ($colors as $color_key => $color) {
            if (empty($color['color_name']) || empty($color['color_path'])) {
                continue;
            }

            $items["Color#{$color_key}"] = [
                'type' => "row",
                'name' => "Color",
                'items' => [
                    'title' => [
                        'type' => "text",
                        'title' => "Цвет",
                        'value' => $color['color_name'],
                    ],
                    'code' => [
                        'type' => "text",
                        'title' => "Код цвета",
                        'value' => "",
                    ],
                    'image' => [
                        'type' => "image",
                        'title' => "Изображение",
                        'value' => "assets/import/images/Catalog/".$color['color_path'],
                    ],
                ],
            ];
        }

        return $items;
    }

    /**
     * @param  array  $modifications
     * @return array
     */
    private function formatModifications(array $modifications): array
    {
        $data = $modifications;

        $modifications = [];

        if (empty($data)) {
            return $modifications;
        }

        foreach ($data as $key => $group) {
            $group_key_unique = "Modification#{$key}";

            $modification = [
                'type' => "row",
                'name' => "Modification",
                'title' => "Модификация",
                'value' => $group['mod_name'],
                'placeholder' => "Наименование модификации",
                'items' => [
                    'engine_volume' => [
                        'type' => 'text',
                        'name' => 'engine_volume',
                        'value' => (string) $group['specifications']['Краткая информация']['Объем в литрах'],
                    ],
                    'engine_displacement' => [
                        'type' => 'text',
                        'name' => 'engine_displacement',
                        'value' => (string) $group['specifications']['Краткая информация']['Объем'],
                    ],
                    'engine_type' => [
                        'type' => 'text',
                        'name' => 'engine_type',
                        'value' => (string) $group['specifications']['Краткая информация']['Тип двигателя'],
                    ],
                    'drive' => [
                        'type' => 'text',
                        'name' => 'drive',
                        'value' => (string) $group['specifications']['Краткая информация']['Привод'],
                    ],
                    'engine_power' => [
                        'type' => 'text',
                        'name' => 'engine_power',
                        'value' => (string) $group['specifications']['Краткая информация']['Мощность л.с.'],
                    ],
                    'length' => [
                        'type' => 'text',
                        'name' => 'length',
                        'value' => "",
                    ],
                    'width' => [
                        'type' => 'text',
                        'name' => 'width',
                        'value' => "",
                    ],
                    'height' => [
                        'type' => 'text',
                        'name' => 'height',
                        'value' => "",
                    ],
                    'fuel_consumption_city' => [
                        'type' => 'text',
                        'name' => 'fuel_consumption_city',
                        'value' => (string) $group['specifications']['Эксплуатационные показатели']['Расход топлива в городе на 100 км'],
                    ],
                    'fuel_consumption' => [
                        'type' => 'text',
                        'name' => 'fuel_consumption',
                        'value' => (string) $group['specifications']['Эксплуатационные показатели']['Расход топлива на трассе на 100 км'],
                    ],
                    'combined_fuel' => [
                        'type' => 'text',
                        'name' => 'combined_fuel',
                        'value' => (string) $group['specifications']['Эксплуатационные показатели']['Расход топлива в смешанном цикле на 100 км'],
                    ],
                    'acceleration' => [
                        'type' => 'text',
                        'name' => 'acceleration',
                        'value' => (string) $group['specifications']['Эксплуатационные показатели']['Разгон до 100 км/ч'],
                    ],
                    'maximum_speed' => [
                        'type' => 'text',
                        'name' => 'maximum_speed',
                        'value' => (string) $group['specifications']['Эксплуатационные показатели']['Максимальная скорость'],
                    ],
                    'fuel_volume' => [
                        'type' => 'text',
                        'name' => 'fuel_volume',
                        'value' => "",
                    ],
                    'luggage_compartment_volume' => [
                        'type' => 'text',
                        'name' => 'luggage_compartment_volume',
                        'value' => (string) $group['specifications']['Объём и масса']['Объем багажника макс'],
                    ],
                    'luggage_minimum_volume' => [
                        'type' => 'text',
                        'name' => 'luggage_minimum_volume',
                        'value' => (string) $group['specifications']['Объём и масса']['Объем багажника мин'],
                    ],
                    'luggage_maximum_volume' => [
                        'type' => 'text',
                        'name' => 'luggage_maximum_volume',
                        'value' => (string) $group['specifications']['Объём и масса']['Объем багажника макс'],
                    ],
                    'clearance' => [
                        'type' => 'text',
                        'name' => 'clearance',
                        'value' => (string) $group['specifications']['Объём и масса']['Клиренс'],
                    ],
                    'wheel_base' => [
                        'type' => 'text',
                        'name' => 'wheel_base',
                        'value' => (string) $group['specifications']['Объём и масса']['Колёсная база'],
                    ],
                    'wheel_front_track' => [
                        'type' => 'text',
                        'name' => 'wheel_front_track',
                        'value' => "",
                    ],
                    'wheel_rear_track' => [
                        'type' => 'text',
                        'name' => 'wheel_rear_track',
                        'value' => "",
                    ],
                    'suspension_front' => [
                        'type' => 'text',
                        'name' => 'suspension_front',
                        'value' => (string) $group['specifications']['Подвеска и тормоза']['Тип передней подвески'],
                    ],
                    'suspension_rear' => [
                        'type' => 'text',
                        'name' => 'suspension_rear',
                        'value' => (string) $group['specifications']['Подвеска и тормоза']['Тип задней подвески'],
                    ],
                    'overhang_front' => [
                        'type' => 'text',
                        'name' => 'overhang_front',
                        'value' => "",
                    ],
                    'overhang_rear' => [
                        'type' => 'text',
                        'name' => 'overhang_rear',
                        'value' => "",
                    ],
                    'brakes_front' => [
                        'type' => 'text',
                        'name' => 'brakes_front',
                        'value' => (string) $group['specifications']['Подвеска и тормоза']['Передние тормоза'],
                    ],
                    'brakes_rear' => [
                        'type' => 'text',
                        'name' => 'brakes_rear',
                        'value' => (string) $group['specifications']['Подвеска и тормоза']['Задние тормоза'],
                    ],
                    'gear' => [
                        'type' => 'text',
                        'name' => 'gear',
                        'value' => (string) $group['specifications']['Краткая информация']['Трансмиссия'],
                    ],
                    'number_gears' => [
                        'type' => 'text',
                        'name' => 'number_gears',
                        'value' => (string) $group['specifications']['Краткая информация']['Кол-во передач'],
                    ]
                ],
            ];

            if (!empty($group['versions'])) {
                foreach ($group['versions'] as $version_key => $version) {
                    $version_key_unique = "ModificationItem#{$version_key}";
                    $price_text = (string) $version['discount_price'];
                    $price = (int) preg_replace('/[^0-9]/', '', $price_text);

                    $_SESSION['car.prices'][] = $price;

                    $modification['items'][$version_key_unique] = [
                        'type' => 'row',
                        'name' => 'ModificationItem',
                        'title' => "Комплектация",
                        'value' => (string) $version['version_name'],
                        'placeholder' => "Наименование комплектации",
                        'items' => [
                            'price' => [
                                'type' => 'text',
                                'name' => 'price',
                                'value' => $price_text,
                            ]
                        ]
                    ];

                    if (!empty($version['options'])) {
                        $option_index = 0;

                        foreach ($version['options'] as $option_key => $option) {
                            if (!empty($option) && is_array($option)) {
                                $option = implode(", ", $option);
                            }

                            $option_key_unique = "ModificationItemOption#{$option_index}";
                            $modification['items'][$version_key_unique]['items'][$option_key_unique] = [
                                'type' => 'row',
                                'name' => 'ModificationItemOption',
                                'title' => "Опция комплектации",
                                'value' => (string) $option_key,
                                'placeholder' => "Наименование опции",
                                'items' => [
                                    'content' => [
                                        'type' => 'richtext',
                                        'name' => 'content',
                                        'value' => (string) $option,
                                    ]
                                ]
                            ];
                            $option_index = $option_index + 1;
                        }
                    }
                }
            }

            $modifications[$group_key_unique] = $modification;
        }

        return $modifications;
    }
}
